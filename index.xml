<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://zhxzhcode.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Sep 2020 14:23:10 +0800</lastBuildDate>
    
	<atom:link href="https://zhxzhcode.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Chapter 5 初始化与清理</title>
      <link>https://zhxzhcode.github.io/java/chapter5/initialize/</link>
      <pubDate>Mon, 28 Sep 2020 14:23:10 +0800</pubDate>
      
      <guid>https://zhxzhcode.github.io/java/chapter5/initialize/</guid>
      <description>1.构造器确保初始化 ==***构造器：***== 在创建对象时被自动调用的特殊方法。
Java中构造器采用与类相同的名字。
当你new一个对象时，将会位对象分配存储空间，并且调用相应的构造器。
不接受任何参数的构造器叫 ==默认构造器==。
class Rock { Rock(){ System.out.print(&amp;quot;Rock &amp;quot;); } } public class SimpleConstructor{ public static void main(String[] args){ for(int i=0;i&amp;lt;0;i++) new Rock(); } } output:
Rock Rock Rock Rock Rock.... 构造器也可以接受参数，我们就可以在初始化对象时候提供实际的参数。
class Rock2{ Rock2(int i){ //this is the consructor. System.out.print(&amp;quot;Rock &amp;quot;+i+&amp;quot; &amp;quot;); } } public class SimpleConstructor2{ public static void main(String[] args){ for(int i=0;i&amp;lt;10;i++){ new Rock2(i); } } } 2.方法重载 所谓方法重载拿构造器举例，你想要以多种方法来构造这个函数，那么你可以写出好几种构造方法。
class Tree{ int height; Tree(){ System.</description>
    </item>
    
    <item>
      <title>进程调度(一)—-时间记账</title>
      <link>https://zhxzhcode.github.io/linux/process/porcess_sched_time/</link>
      <pubDate>Mon, 28 Sep 2020 12:55:08 +0800</pubDate>
      
      <guid>https://zhxzhcode.github.io/linux/process/porcess_sched_time/</guid>
      <description>1.调度器实体结构  Linux中所有的进程使用task_struct描述。task_struct包含很多进程相关的信息（例如，优先级、进程状态以及调度实体等）。但是，每一个调度类并不是直接管理task_struct，而是引入调度实体的概念。CFS调度器使用sched_entity跟踪调度信息。CFS调度器使用cfs_rq跟踪就绪队列信息以及管理就绪态调度实体，并维护一棵按照虚拟时间排序的红黑树。
struct sched_entity { struct load_weight	load;	//权重信息 struct rb_node	run_node;	//CFS调度器的每个就绪队列维护了一颗红黑树，上面挂满了就绪等待执行的task，run_node就是挂载点 struct list_head	group_node;	unsigned int	on_rq;	//调度实体se加入就绪队列后，on_rq置1。从就绪队列删除后，on_rq置0 u64	exec_start; u64	sum_exec_runtime;	//调度实体已经运行实际时间总合 u64	vruntime;	//调度实体已经运行的虚拟时间总合 u64	prev_sum_exec_runtime; u64	last_wakeup; u64	avg_overlap; u64	nr_migrations; u64	start_runtime; u64	avg_wakeup; .......... } 2.虚拟时间 2.1 vruntime CFS通过每个进程的虚拟运行时间（vruntime）来衡量哪个进程最值得被调度。
虚拟运行时间是通过进程的实际运行时间和进程的权重（weight）计算出来的。
就绪队列上虚拟时间的信息：
struct cfs_rq { struct load_weight load;	//所有进程累计负荷值 unsigned long nr_running;	//当前就绪队列的进程数 u64 exec_clock; u64 min_vruntime;	//就绪队列上所有调度实体的最小虚拟时间 ................. 2.2 update_curr计算进程虚拟时间 先给出update_curr函数源码：
static void update_curr(struct cfs_rq *cfs_rq) { struct sched_entity *curr = cfs_rq-&amp;gt;curr;//确定就绪队列当前执行的进程curr u64 now = rq_of(cfs_rq)-&amp;gt;clock;//rq_of返回了cfs_rq所在的全局就绪队列并获取clock unsigned long delta_exec; //如果就绪队列没有进程执行，无事可做 if (unlikely(!</description>
    </item>
    
    <item>
      <title>CFS调度算法(二)--进程选择</title>
      <link>https://zhxzhcode.github.io/linux/process/process_sched_processchose/</link>
      <pubDate>Tue, 08 Sep 2020 22:04:51 +0800</pubDate>
      
      <guid>https://zhxzhcode.github.io/linux/process/process_sched_processchose/</guid>
      <description>CFS如何进行进程选择</description>
    </item>
    
  </channel>
</rss>