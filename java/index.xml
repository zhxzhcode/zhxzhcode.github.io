<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javas on My New Hugo Site</title>
    <link>https://zhxzhcode.github.io/java/</link>
    <description>Recent content in Javas on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Sep 2020 14:23:10 +0800</lastBuildDate>
    
	<atom:link href="https://zhxzhcode.github.io/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Chapter 5 初始化与清理</title>
      <link>https://zhxzhcode.github.io/java/chapter5/initialize/</link>
      <pubDate>Mon, 28 Sep 2020 14:23:10 +0800</pubDate>
      
      <guid>https://zhxzhcode.github.io/java/chapter5/initialize/</guid>
      <description>1.构造器确保初始化 ==***构造器：***== 在创建对象时被自动调用的特殊方法。
Java中构造器采用与类相同的名字。
当你new一个对象时，将会位对象分配存储空间，并且调用相应的构造器。
不接受任何参数的构造器叫 ==默认构造器==。
class Rock { Rock(){ System.out.print(&amp;quot;Rock &amp;quot;); } } public class SimpleConstructor{ public static void main(String[] args){ for(int i=0;i&amp;lt;0;i++) new Rock(); } } output:
Rock Rock Rock Rock Rock.... 构造器也可以接受参数，我们就可以在初始化对象时候提供实际的参数。
class Rock2{ Rock2(int i){ //this is the consructor. System.out.print(&amp;quot;Rock &amp;quot;+i+&amp;quot; &amp;quot;); } } public class SimpleConstructor2{ public static void main(String[] args){ for(int i=0;i&amp;lt;10;i++){ new Rock2(i); } } } 2.方法重载 所谓方法重载拿构造器举例，你想要以多种方法来构造这个函数，那么你可以写出好几种构造方法。
class Tree{ int height; Tree(){ System.</description>
    </item>
    
  </channel>
</rss>